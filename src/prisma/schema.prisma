// https://stackoverflow.com/questions/74769279/prisma-next-auth-planetscale-foreign-key-constraints-are-not-allowed

generator client {
  provider     = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  discordUserId   String   @id @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  discordUsername String   @db.VarChar(255)

  watches               Watch[]
  blockedSellersByWatch BlockedSellerByWatch[]
  blockedSellers        BlockedSeller[]
  snoozedUsers          SnoozedUser[]
}

enum Server {
  BLUE
  GREEN
  RED
}

enum WatchType {
  WTS
  WTB
}

model Watch {
  id                   Int       @id @default(autoincrement())
  discordUserId        String
  server               Server
  watchType            WatchType
  itemName             String    @db.VarChar(255)
  priceRequirement     Int?
  lastAlertedTimestamp DateTime?
  // created is used in place of expiration timestamp- prisma does not support db.add for time manipulation
  // within defaults, this does not use @updatedAt as we will only modify this column when extending watches
  created              DateTime  @default(now())
  active               Boolean   @default(true)

  user           User                    @relation(fields: [discordUserId], references: [discordUserId])
  blockedWatches BlockedSellerByWatch[]
  snoozedWatches SnoozedWatch[]

  @@unique([discordUserId, itemName, server, watchType])
}


model BlockedSellerByWatch {
  id            Int    @id @default(autoincrement())
  discordUserId String
  watchId       Int
  seller        String @db.VarChar(255)

  watch Watch @relation(fields: [watchId], references: [id])
  user  User  @relation(fields: [discordUserId], references: [discordUserId])

  @@unique([watchId, seller])
  @@index([discordUserId])
}

model BlockedSeller {
  id            Int    @id @default(autoincrement())
  discordUserId String
  server        Server
  seller        String @db.VarChar(255)

  user User @relation(fields: [discordUserId], references: [discordUserId])

  @@unique([discordUserId, server, seller])
}

model SnoozedWatch {
  id           Int      @id @default(autoincrement())
  watchId      Int
  endTimestamp DateTime

  watch Watch @relation(fields: [watchId], references: [id])

  @@unique([watchId])
}

model SnoozedUser {
  id            Int      @id @default(autoincrement())
  discordUserId String
  endTimestamp  DateTime

  user User @relation(fields: [discordUserId], references: [discordUserId])

  @@unique([discordUserId])
}
